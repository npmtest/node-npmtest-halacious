{"/home/travis/build/npmtest/node-npmtest-halacious/test.js":"/* istanbul instrument in package npmtest_halacious */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-halacious/lib.npmtest_halacious.js":"/* istanbul instrument in package npmtest_halacious */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_halacious = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_halacious = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-halacious/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-halacious && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_halacious */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_halacious\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_halacious.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_halacious.rollup.js'] =\n            local.assetsDict['/assets.npmtest_halacious.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_halacious.__dirname + '/lib.npmtest_halacious.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-halacious/node_modules/halacious/index.js":"'use strict';\n\nmodule.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-halacious/node_modules/halacious/lib/index.js":"'use strict';\n\nmodule.exports = require('./plugin');","/home/travis/build/npmtest/node-npmtest-halacious/node_modules/halacious/lib/plugin.js":"'use strict';\n\nvar joi = require('joi');\nvar hapi = require('hapi');\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\nvar hoek = require('hoek');\nvar pug = require('pug');\nvar util = require('util');\nvar async = require('async');\nvar marked = require('marked');\nvar RepresentationFactory = require('./representation').RepresentationFactory;\nvar urlTemplate = require('url-template');\nvar Negotiator = require('negotiator');\nvar URITemplate = require('urijs/src/URITemplate');\nvar url = require('url');\nvar URI = require('urijs');\n\nvar HAL_MIME_TYPE = 'application/hal+json';\n\nvar re = /\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g;\n\nfunction reach(object, path) {\n    var parts = path ? path.split('.') : [];\n\n    for (var i = 0; i < parts.length && !_.isUndefined(object); i++) {\n        object = object[parts[i]];\n    }\n\n    return object;\n}\n\n/**\n * evaluates and flattens deep expressions (e.g. '/{foo.a.b}') into a single level context object: {'foo.a.b': value}\n * so that it may be used by url-template library\n * @param template\n * @param ctx\n * @return {{}}\n */\nfunction flattenContext(template, ctx) {\n    var arr, result = {};\n\n    while ((arr = re.exec(template)) !== null) {\n        if (arr[1]) {\n            var value = reach(ctx, arr[1]);\n            result[arr[1]] = value && value.toString();\n        }\n    }\n\n    return result;\n}\n\nvar optionsSchema = {\n    absolute: joi.boolean().default(false),\n    host: joi.string(),\n    hostname: joi.string(),\n    port: joi.number().integer(),\n    protocol: joi.string(),\n    strict: joi.boolean().default(false),\n    relsPath: joi.string().default('/rels'),\n    relsAuth: joi.alternatives().try(joi.boolean().allow(false),joi.object()).default(false),\n    relsTemplate: joi.boolean().default(true),\n    autoApi: joi.boolean().default(true),\n    apiPath: joi.string().allow('').default('/api'),\n    apiAuth: joi.alternatives().try(joi.boolean().allow(false),joi.object()).default(false),\n    apiServerLabel: joi.string(),\n    mediaTypes: joi.array().includes(joi.string()).single().default([HAL_MIME_TYPE]),\n    requireHalJsonAcceptHeader: joi.boolean().default(false),\n    marked: joi.object().default({})\n};\n\n/**\n * Registers plugin routes and an \"api\" object with the hapi server.\n * @param server\n * @param opts\n * @param next\n */\nexports.register = function (server, opts, next) {\n    var settings = opts;\n\n    joi.validate(opts, optionsSchema, function (err, validated) {\n        if (err) throw err;\n\n        settings = validated;\n    });\n\n    marked.setOptions(settings.marked);\n\n    var selection = settings.apiServerLabel ? server.select(settings.apiServerLabel) : server;\n\n    var internals = {};\n\n// for tracking down namespaces\n    internals.byName = {};\n    internals.byPrefix = {};\n\n// valid rel options\n    internals.relSchema = {\n        // the rel name, will default to file's basename if available\n        name: joi.string()\n            .required(),\n\n        // a path to the rel's documentation in html or markdown\n        file: joi.string()\n            .optional(),\n\n        // a short textual description\n        description: joi.string()\n            .optional(),\n\n        // returns the qualified name of the rel (including the namespace)\n        qname: joi.func()\n            .optional()\n            .default(function () {\n                return this.namespace ? util.format('%s:%s', this.namespace.prefix, this.name) : this.name;\n            })\n    };\n\n// valid namespace options\n    internals.nsSchema = {\n        // the namespace name, will default to dir basename if available\n        name: joi.string()\n            .required(),\n\n        // a path to a directory containing rel descriptors. all rels will automatically be added\n        dir: joi.string()\n            .optional(),\n\n        // the namespace prefix for shorthand rel addressing (e.g. 'prefix:relname')\n        prefix: joi.string()\n            .optional()\n            .default(joi.ref('name')),\n\n        // a short description\n        description: joi.string()\n            .optional(),\n\n        // a map of rel objects, keyed by name\n        rels: joi.object()\n            .optional(),\n\n        // validates and adds a rel to the namespace\n        rel: joi.func()\n            .optional()\n            .default(function (rel) {\n                this.rels = this.rels || {};\n\n                if (_.isString(rel)) rel = { name: rel };\n\n                rel.name = rel.name || rel.file && path.basename(rel.file, path.extname(rel.file));\n                joi.validate(rel, internals.relSchema, function (err, value) {\n                    if (err) throw err;\n                    rel = value;\n                });\n                this.rels[rel.name] = rel;\n                rel.namespace = this;\n                return this;\n            }),\n\n        // synchronously scans a directory for rel descriptors and adds them to the namespace\n        scanDirectory: joi.func()\n            .optional()\n            .default(function (directory) {\n                var files = fs.readdirSync(directory);\n                files.forEach(function (file) {\n                    this.rel({ file: path.join(directory, file) });\n                }, this);\n\n                return this;\n            })\n    };\n\n    internals.filter = function (request) {\n        return _.get(request.route.settings, 'plugins.hal', true);\n    };\n\n    /**\n     * Returns a list of all registered namespaces sorted by name\n     * @return {*}\n     */\n    internals.namespaces = function () {\n        return _.sortBy(_.values(internals.byName), 'name');\n    };\n\n    /**\n     * Validates and adds a new namespace configuration\n     * @param namespace the namespace config\n     * @return {*} a new namespace object\n     */\n    internals.namespaces.add = function (namespace) {\n        // if only dir is specified\n        namespace.name = namespace.name || namespace.dir && path.basename(namespace.dir);\n\n        // fail fast if the namespace isnt valid\n        joi.validate(namespace, internals.nsSchema, function (err, value) {\n            if (err) throw err;\n            namespace = value;\n\n            // would prefer to initialize w/ joi but it keeps a static reference to the value for some reason\n            namespace.rels = {};\n        });\n\n        if (namespace.dir) {\n            namespace.scanDirectory(namespace.dir);\n        }\n\n        // index and return\n        internals.byName[namespace.name] = namespace;\n        internals.byPrefix[namespace.prefix] = namespace;\n\n        return namespace;\n    };\n\n    /**\n     * Removes one or all registered namespaces. Mainly used for testing\n     * @param {String=} namespace the namespace to remove. a falsy value will remove all namespaces\n     */\n    internals.namespaces.remove = function (namespace) {\n        var ns;\n\n        if (!namespace) {\n            internals.byName = {};\n            internals.byPrefix = {};\n        } else {\n            ns = internals.byName[namespace];\n            if (ns) {\n                delete internals.byName[namespace];\n                delete internals.byPrefix[namespace.prefix];\n            }\n        }\n    };\n\n    /**\n     * Looks up a specific namespace\n     * @param namespace\n     * @return {*}\n     */\n    internals.namespace = function (namespace) {\n        return internals.byName[namespace];\n    };\n\n    /**\n     * Sorts and returns all rels by namespace\n     * @return {*}\n     */\n    internals.rels = function () {\n        var rels = [];\n        _.values(internals.byName)\n            .forEach(function (ns) {\n                rels = rels.concat(_.values(ns.rels) || []);\n            });\n        return _.sortBy(rels, 'name');\n    };\n\n    /**\n     * Adds a new rel configuration to a namespace\n     * @param {String} namespace the namespace name\n     * @param rel the rel configuration\n     * @return the new rel\n     */\n    internals.rels.add = function (namespace, rel) {\n        var ns = internals.byName[namespace];\n        if (!ns) throw new Error('Invalid namespace ' + namespace);\n        ns.rel(rel);\n        return ns.rels[rel.name];\n    };\n\n    /**\n     * Looks up a rel under a given namespace\n     * @param {String} namespace the namespace name\n     * @param {String} name the rel name\n     * @return {*} the rel or undefined if not found\n     */\n    internals.rel = function (namespace, name) {\n        var parts, ns, rel;\n\n        if (!name) {\n            // for shorthand namespace:rel notation\n            if (namespace.indexOf(':') > 0) {\n                parts = namespace.split(':');\n                ns = internals.byPrefix[parts[0]];\n                name = parts[1];\n            }\n        } else {\n            ns = internals.byName[namespace];\n        }\n\n        // namespace is valid, check for rel\n        if (ns) {\n            if (ns.rels[name]) {\n\n                // rel has been defined\n                rel = ns.rels[name];\n\n            } else if (!settings.strict) {\n\n                // lazily create the rel\n                ns.rel({ name: name });\n                rel = ns.rels[name];\n\n            } else {\n                // could be a typo, fail fast to let the developer know\n                throw new Error('No such rel: \"' + namespace + '\"');\n            }\n        } else {\n            // could be globally qualified (e.g. 'self')\n            joi.validate({ name: namespace }, internals.relSchema, function (err, value) {\n                rel = value;\n            });\n        }\n\n        return rel;\n    };\n\n    /**\n     * Route handler for /rels\n     * @type {{handler: handler}}\n     */\n    internals.namespacesRoute = function (relsAuth) {\n        return {\n            auth: relsAuth,\n            handler: function (req, reply) {\n                reply.view('namespaces', { path: req.path, namespaces: internals.namespaces() });\n            }\n        };\n    };\n\n    /**\n     * Route handler for /rels/{namespace}/{rel}\n     * @type {{handler: handler}}\n     */\n    internals.relRoute = function (relsAuth) {\n        return {\n            auth: relsAuth,\n            handler: function (req, reply) {\n                var rel = internals.rel(req.params.namespace, req.params.rel);\n                if (!rel) return reply(hapi.error.notFound());\n\n                if (rel.file) {\n                    fs.readFile(rel.file, function (err, data) {\n                        if(settings.relsTemplate) {\n                            reply.view('rel', { rel: rel, relData: marked(data.toString()) });\n                        } else {\n                            reply(marked(data.toString()))\n                        }\n                    });\n                } else {\n                    reply.view('rel', { rel: rel });\n                }\n            }\n        };\n    };\n\n// see http://tools.ietf.org/html/draft-kelly-json-hal-06#section-8.2\n    internals.linkSchema = {\n        href: joi.alternatives([joi.string(), joi.func()])\n            .required(),\n        templated: joi.boolean()\n            .optional(),\n        title: joi.string()\n            .optional(),\n        type: joi.string()\n            .optional(),\n        deprecation: joi.string()\n            .optional(),\n        name: joi.string()\n            .optional(),\n        profile: joi.string()\n            .optional(),\n        hreflang: joi.string()\n            .optional()\n    };\n\n    internals.isRelativePath = function (path) {\n        return path && (path.substring(0, 2) === './' || path.substring(0, 3) === '../');\n    };\n\n    /**\n     * Resolves a name\n     * @param link\n     * @param relativeTo\n     */\n    internals.link = function (link, relativeTo) {\n        relativeTo = relativeTo && relativeTo.split('?')[0];\n        link = _.isFunction(link) || _.isString(link) ? { href: link } : hoek.clone(link);\n        joi.validate(link, internals.linkSchema, function (err, value) {\n            if (err) throw err;\n            link = value;\n        });\n\n        if (relativeTo && internals.isRelativePath(link.href)) {\n            link.href = new URI(link.href).absoluteTo(relativeTo + '/')\n                .toString();\n        }\n\n        return link;\n    };\n\n// keeps found routes in a cache\n    internals.routeCache = {};\n\n    /**\n     * Locates a named route. This feature may not belong here\n     * @param routeName\n     * @return {*}\n     */\n    internals.locateRoute = function (routeName) {\n        var route, routes, i;\n\n        if (internals.routeCache[routeName]) {\n            return internals.routeCache[routeName].path;\n        }\n\n        routes = server.table()\n            .reduce(function (acc, conn) {\n                return acc.concat(conn.table);\n            }, []);\n\n        for (i = 0; i < routes.length; i++) {\n            route = routes[i];\n            if (route.settings.plugins.hal && route.settings.plugins.hal.name === routeName) {\n                internals.routeCache[routeName] = route;\n                return route;\n            }\n        }\n    };\n\n    /**\n     * Locates a named route and expands templated parameters\n     * @param routeId\n     * @param params\n     * @return String the expanded path to the named route\n     */\n    internals.route = function (routeId, params) {\n        var route = server.lookup(routeId) || internals.locateRoute(routeId);\n        if (!route) throw new Error('No route found with id or name ' + routeId);\n        var href = _.template(route.path, { interpolate: /{([\\s\\S]+?)(?:\\?|\\*\\d*)??}/g })(_.mapValues(params, function(val) {\n            return typeof val !== 'object' ? encodeURIComponent(val) : val;\n        }));\n        var query = hoek.reach(route.settings, 'plugins.hal.query');\n        return query ? href + query : href;\n    };\n\n    /**\n     * Returns the documentation link to a namespace\n     * @param request\n     * @param namespace\n     * @return {*}\n     */\n    internals.namespaceUrl = function (request, namespace) {\n        var path = [settings.relsPath, namespace.name].join('/');\n\n        if (settings.absolute) {\n            return internals.buildUrl(request, path);\n        }\n\n        return path;\n    };\n\n    /**\n     * Configures a representation with parameters specified by a hapi route config. The configuration object may\n     * include 'links', 'embedded', and 'prepare' properties.\n     * @param {Representation} rep the representation to configure\n     * @param {{}} config the config object\n     * @param callback\n     */\n    internals.configureRepresentation = function configureRepresentation(rep, config, callback) {\n        var resolveHref = function (href, ctx) {\n            return _.isFunction(href) ? href(rep, ctx) : urlTemplate.parse(href)\n                .expand(flattenContext(href, ctx));\n        };\n\n        try {\n            var entity = rep.entity;\n\n            // shorthand prepare function\n            if (_.isFunction(config)) config = { prepare: config };\n\n            // configure links\n            _.forEach(config.links, function (link, rel) {\n                link = internals.link(link, rep.self.href);\n                link.href = resolveHref(link.href, entity);\n                rep.link(rel, link);\n\n                // grab query options\n                if (config.query) {\n                    link.href += config.query;\n                }\n            });\n\n            /**\n             * Wraps callback functions to support next(rep) instead of next(null, rep)\n             * @param callback\n             * @return {Function}\n             */\n            var wrap = function (callback) {\n                return function (err, result) {\n                    if (err instanceof Error) {\n                        callback(err);\n                    } else {\n                        callback(null, result || rep);\n                    }\n                };\n            };\n\n            /**\n             * Looks for a toHal(representation, next) method on the entity. If found, it is called asynchronously. The method may modify the\n             * representation or pass back a completely new representation by calling next(newRep)\n             * @param callback\n             */\n            var convertEntity = function (callback) {\n                if (_.isFunction(entity.toHal)) {\n                    entity.toHal(rep, wrap(callback));\n                } else {\n                    callback(null, rep);\n                }\n            };\n\n            /**\n             * Looks for an asynchronous prepare method for programmatic configuration of the outbound hal entity. As with\n             * toHal(), the prepare method can modify the existing rep or create an entirely new one.\n             * @param rep\n             * @param callback\n             */\n            var prepareEntity = function (rep, callback) {\n                if (_.isFunction(config.prepare)) {\n                    config.prepare(rep, wrap(callback));\n                } else {\n                    callback(null, rep);\n                }\n            };\n\n            // configure embedded declarations. each rel entry is also a representation config object\n            async.each(Object.keys(config.embedded || {}), function (rel, cb) {\n                var embed = config.embedded[rel];\n\n                // assume that arrays should be embedded as a collection\n                if (!embed.path) {\n                    throw new Error('Error in route ' + rep.request.path + ': \"embedded\" route configuration property requires a path');\n                }\n                var embedded = hoek.reach(entity, embed.path);\n                if (!embedded) return cb();\n\n                // force the embed array to be inialized. no self rel is necessary\n                if (_.isArray(embedded)) rep.embed(rel, null, []);\n\n                // force into an array for iterating\n                embedded = [].concat(embedded);\n\n                // embedded reps probably also shouldnt appear in the object payload\n                rep.ignore(embed.path);\n\n                async.each(embedded, function (item, acb) {\n                    var link = internals.link(resolveHref(embed.href, { self: entity, item: item }), rep.self.href);\n\n                    // create the embedded representation from the possibly templated href\n                    var embeddedRep = rep.embed(rel, link, item);\n\n                    embeddedRep = _.isArray(embeddedRep) ? embeddedRep : [embeddedRep];\n                    // recursively process its links/embedded declarations\n                    async.each(embeddedRep, function (e, bcb) {\n                        configureRepresentation(e, embed, bcb);\n                    }, acb);\n                }, cb);\n\n            }, function (err) {\n                if (err) return callback(err);\n\n                rep.ignore(config.ignore);\n\n                // cascade the async config functions\n                async.waterfall([\n                    convertEntity,\n                    prepareEntity\n                ], callback);\n            });\n        } catch (e) {\n            callback(e);\n        }\n    };\n\n    /**\n     * Selects the media type based on the request's Accept header and a ranked ordering of configured\n     * media types.\n     * @param mediaTypes\n     * @param request\n     * @return {*}\n     */\n    internals.getMediaType = function (mediaTypes, request) {\n        return new Negotiator(request).mediaType(_.isArray(mediaTypes) ? mediaTypes : [mediaTypes]);\n    };\n\n    /**\n     * Expands the url path to include protocol://server:port\n     * @param request\n     * @param path\n     * @param search\n     * @return {*}\n     */\n    internals.buildUrl = function (request, path, search) {\n        return url.format({\n            host: settings.host || request.headers.host,\n            hostname: settings.hostname || request.connection.info.host,\n            port: settings.port || request.connection.info.port,\n            pathname: path,\n            protocol: settings.protocol || request.connection.info.protocol,\n            search: search\n        });\n    };\n\n    /**\n     * Expands the query string template, if present, using query parameter values in the request.\n     * @param request\n     * @param queryTemplate\n     * @param { boolean } absolute whether the link should be expanded to include the server\n     * @return {*}\n     */\n    internals.getRequestPath = function (request, queryTemplate, absolute) {\n        var uriTemplate;\n\n        var path = absolute ? internals.buildUrl(request, request.path) : request.path;\n\n        if (queryTemplate) {\n            uriTemplate = new URITemplate(path + queryTemplate);\n            return uriTemplate.expand(request.query);\n        }\n        return path;\n    };\n\n    /**\n     * Resolves a relative url. Borrowed from hapi\n     * @param request\n     * @param uri\n     * @param absolute\n     * @return {*}\n     */\n    internals.location = function (request, uri, absolute) {\n        var isAbsolute = (uri.match(/^\\w+\\:\\/\\//));\n\n        var path = isAbsolute ? uri : (uri.charAt(0) === '/' ? '' : '/') + uri;\n        var search = null;\n\n        if (isAbsolute) {\n            path = uri;\n        } else {\n            var parts = uri.split('?');\n            path = (parts[0].charAt(0) === '/' ? '' : '/') + parts[0];\n            if (parts.length > 1) {\n                search = parts[1];\n            }\n        }\n\n        if (absolute) {\n            path = internals.buildUrl(request, path, search);\n        }\n        return path;\n    };\n\n    internals.successfulResponseCode = function (statusCode) {\n        return statusCode >= 200 && statusCode < 300;\n    };\n\n    internals.isSourceEligible = function (source) {\n        return _.isObject(source) && !(_.isArray(source));\n    };\n\n    internals.isAcceptHeaderValid = function (request) {\n        var accept = request.headers.accept || '';\n\n        return !settings.requireHalJsonAcceptHeader || accept.toLowerCase().indexOf(HAL_MIME_TYPE) >= 0;\n    };\n\n    internals.isRequestEligible = function (request) {\n        // hapi 9/10 routes can be marked internal only\n        return !request.route.settings.isInternal && internals.isAcceptHeaderValid(request) && internals.filter(request);\n    };\n\n    internals.isResponseEligible = function (response) {\n        return response.variety === 'plain' && internals.successfulResponseCode(response.statusCode);\n    };\n\n    internals.shouldHalify = function (request) {\n        return internals.isRequestEligible(request) &&\n            internals.isResponseEligible(request.response) &&\n            internals.isSourceEligible(request.response.source);\n    };\n\n    /**\n     * Prepares a hal response with all root \"api\" handlers declared in the routing table. Api handlers are identified with\n     * the plugins.hal.api configuration settings. This function is exported for convenience if the developer wishes to\n     * define his or her own api handler in order to include metadata in the payload\n     *\n     * @param absolute\n     * @param rep\n     * @param next\n     */\n    internals.apiLinker = function (absolute, rep, next) {\n        // grab the routing table and iterate\n        var req = rep.request;\n\n        var routes = req.server.table()\n            .reduce(function (acc, conn) {\n                return acc.concat(conn.table);\n            }, []);\n\n        for (var i = 0; i < routes.length; i++) {\n            var route = routes[i];\n\n            var halConfig = route.settings.plugins.hal || {};\n\n            if (halConfig.api) {\n                var rel = halConfig.api;\n                var href = routes[i].path;\n\n                if (absolute) {\n                    href = internals.buildUrl(rep.request, href);\n                }\n\n                // grab query options\n                if (halConfig.query) {\n                    href += halConfig.query;\n                }\n\n                rep.link(rel, href);\n            }\n        }\n        next();\n    };\n\n    /**\n     * Creates an auto api route configuration\n     * @param absolute\n     * @param apiAuth\n     * @return {{auth: *, handler: handler, plugins: {hal: apiLinker}}}\n     */\n    internals.apiRouteConfig = function (absolute, apiAuth) {\n        return {\n            auth: apiAuth,\n            handler: function (req, reply) {\n                reply({})\n                    .type(HAL_MIME_TYPE);\n            },\n            plugins: {\n                hal: internals.apiLinker.bind(null, absolute)\n            }\n        };\n    };\n\n    /**\n     * Creates a redirector to redirect the browser from /api to /api/\n     * @param apiUrl\n     * @param apiAuth\n     * @return {{auth: *, handler: handler}}\n     */\n    internals.apiRedirectConfig = function (apiUrl, apiAuth) {\n        return {\n            auth: apiAuth,\n            handler: function (req, reply) {\n                reply.redirect(apiUrl + '/');\n            }\n        };\n    };\n\n    /**\n     * Assigns a filter function to test routes before applying the hal interceptor.\n     * @param filterFn\n     */\n    internals.setFilter = function (filterFn) {\n        joi.validate(filterFn, joi.func(), function (err) {\n            if (err) throw err;\n\n            internals.filter = filterFn;\n        });\n    };\n\n    internals.setUrlBuilder = function(urlBuilder) {\n        joi.validate(urlBuilder, joi.func(), function (err) {\n            if (err) throw err;\n\n            internals.buildUrl = urlBuilder;\n        });\n    };\n\n    var api = {\n        namespaces: internals.namespaces,\n        namespace: internals.namespace,\n        namespaceUrl: internals.namespaceUrl,\n        link: internals.link,\n        rels: internals.rels,\n        rel: internals.rel,\n        resolve: internals.resolve,\n        route: internals.route,\n        apiLinker: internals.apiLinker,\n        filter: internals.setFilter,\n        urlBuilder: internals.setUrlBuilder\n    };\n\n    /**\n     * A hapi lifecycle method that looks for the application/hal+json accept header and wraps the response entity into a\n     * HAL representation\n     * @param request\n     * @param reply\n     */\n    internals.postHandler = function (request, reply) {\n        var rf, halConfig, entity, rep, self, location;\n        var mediaType = internals.getMediaType(settings.mediaTypes, request);\n        var absolute;\n\n        if (mediaType && internals.shouldHalify(request)) {\n\n            halConfig = request.route.settings.plugins.hal || {};\n\n            // all new representations for the request will be built by this guy\n            rf = new RepresentationFactory(api, request);\n\n            entity = request.response.source;\n\n            absolute = halConfig.absolute || settings.absolute;\n\n            // e.g. honor the location header if it has been set using response.created(...) or response.location(...)\n            location = request.response.headers.location;\n            self = location ? internals.location(request, location, absolute) : internals.getRequestPath(request, halConfig.query, absolute);\n\n            rep = rf.create(entity, self);\n\n            // asynchronously configure the rep and its children, then send the response\n            internals.configureRepresentation(rep, halConfig, function (err, rep) {\n                if (err) {\n                    return reply(err);\n                }\n\n                // send back what they asked for, as plain object\n                // so validation can be done correctly\n                request.response.source = rep.toJSON();\n                request.response.type(mediaType)\n\n                reply.continue()\n            });\n        } else {\n            reply.continue();\n        }\n    };\n\n    // hapi wont find the local swig without this\n    server.expose(api);\n\n    selection.ext('onPostHandler', internals.postHandler);\n\n    if (settings.autoApi) {\n        // bind the API handler to api root + '/'. Ending with '/' is necessary for resolving relative links on the client\n        selection.route({\n            method: 'GET',\n            path: settings.apiPath + '/',\n            config: internals.apiRouteConfig(settings.absolute, settings.apiAuth)\n        });\n\n        // set up a redirect to api root + '/'\n        if (settings.apiPath.length > 0) {\n            selection.route({\n                method: 'GET',\n                path: settings.apiPath,\n                config: internals.apiRedirectConfig(settings.apiPath, settings.apiAuth)\n            });\n        }\n    }\n\n    internals.preStart = function(server, next) {\n        if (_.isFunction(server.views)) {\n            server.log(['halacious', 'info'], 'Views support detected, installing documentation routes');\n            server.views({\n                engines: {\n                    jade: pug\n                },\n                path: path.join(__dirname, '../views'),\n                isCached: false\n            });\n            server.route({\n                method: 'get',\n                path: settings.relsPath,\n                config: internals.namespacesRoute(settings.relsAuth)\n            });\n            server.route({\n                method: 'get',\n                path: settings.relsPath + '/{namespace}/{rel}',\n                config: internals.relRoute(settings.relsAuth)\n            });\n        } else {\n            server.log(['halacious', 'info'], 'Views support not detected. Please install vision plugin for rel documentation');\n        }\n\n        next();\n    };\n\n    // hapi < v9 does not support 'onPreStart' event\n    if (_.isFunction(server.after)) {\n        server.after(internals.preStart);\n    } else {\n        server.ext('onPreStart', internals.preStart);\n    }\n\n    next();\n};\n\nexports.register.attributes = {\n    pkg: require('../package.json')\n};\n","/home/travis/build/npmtest/node-npmtest-halacious/node_modules/halacious/gulpfile.js":"'use strict';\n\nvar gulp = require('gulp');\nvar mocha = require('gulp-mocha');\nvar istanbul = require('gulp-istanbul');\nvar bump = require('gulp-bump');\nvar git = require('gulp-git');\nvar filter = require('gulp-filter');\nvar jshint = require('gulp-jshint');\nvar stylish = require('jshint-stylish');\nvar tag = require('gulp-tag-version');\nvar spawn = require('child_process').spawn;\n\ngulp.task('test', function (done) {\n    gulp.src(['lib/**/*'])\n        .pipe(istanbul())\n        .pipe(istanbul.hookRequire())\n        .on('finish', function () {\n            gulp.src(['test/*.js'])\n                .pipe(mocha())\n                .pipe(istanbul.writeReports())\n                .on('end', done)\n        });\n});\n\nfunction inc(importance) {\n    // get all the files to bump version in\n    return gulp.src(['./package.json', './bower.json'])\n        // bump the version number in those files\n        .pipe(bump({type: importance}))\n\n        // save it back to filesystem\n        .pipe(gulp.dest('./'))\n\n        // commit the changed version number\n        .pipe(git.commit('bumps package version'))\n\n        // read only one file to get the version number\n        .pipe(filter('package.json'))\n\n        // **tag it in the repository**\n        .pipe(tag())\n}\n\ngulp.task('publish', function (done) {\n    spawn('npm', ['publish'], { stdio: 'inherit' }).on('close', done);\n});\n\ngulp.task('patch', function () {\n    return inc('patch');\n});\n\ngulp.task('feature', function () {\n    return inc('minor');\n});\n\ngulp.task('major', function () {\n    return inc('major');\n});\n\ngulp.task('lint', function () {\n    return gulp.src('./lib/**/*.js')\n        .pipe(jshint())\n        .pipe(jshint.reporter(stylish));\n});\n\ngulp.task('push', function (done) {\n    git.push('origin', 'master', {args: '--tags'}, done);\n});\n\ngulp.task('release', ['lint', 'test', 'patch']);\n\ngulp.task('default', ['lint', 'test']);","/home/travis/build/npmtest/node-npmtest-halacious/node_modules/halacious/lib/representation.js":"'use strict';\n\nvar _ = require('lodash');\nvar hoek = require('hoek');\nvar templatedRE = new RegExp('{*}');\nvar URI = require('urijs');\n\n/**\n * A HAL wrapper interface around an entity. Provides an api for adding new links and recursively embedding child\n * entities.\n *\n * @param factory\n * @param self\n * @param entity\n * @param root\n * @constructor\n */\nfunction Representation(factory, self, entity, root) {\n    this._halacious = factory._halacious;\n    this.factory = factory;\n    this.request = factory._request;\n    this._root = root || this;\n    this.self = self.href;\n    this._links = { self: self };\n    this._embedded = {};\n    this._namespaces = {};\n    this._props = {};\n    this._ignore = {};\n    this.entity = entity;\n}\n\n/**\n * Adds a namespace to the 'curie' link collection. all curies in a response, top level or nested, should be declared\n * in the top level _links collection. a reference '_root' is kept to the top level representation for this purpose\n * @param namespace\n */\nRepresentation.prototype.curie = function(namespace) {\n    if (namespace && !this._root._namespaces[namespace.prefix]) {\n        this._root._namespaces[namespace.prefix] = namespace;\n        this._root._links.curies = this._root._links.curies || [];\n        this._root._links.curies.push({ name: namespace.prefix, href: this._halacious.namespaceUrl(this.request, namespace) + '/{rel}', templated: true});\n    }\n};\n\n/**\n * Adds a custom property to the HAL payload\n * @param {String} name the property name\n * @param {*} value the property value\n * @return {Representation}\n */\nRepresentation.prototype.prop = function(name, value) {\n    this._props[name] = value;\n    return this;\n};\n\n/**\n * Merges an object's properties into the custom properties collection.\n * @param obj\n */\nRepresentation.prototype.merge = function(obj) {\n    hoek.merge(this._props, obj);\n};\n\n/**\n * @param {...String || String[]} props properties to ignore\n * @return {Representation}\n */\nRepresentation.prototype.ignore = function(props) {\n    props = _.isArray(props) ? props : Array.prototype.slice.call(arguments);\n    props.forEach(function (prop) {\n        this._ignore[prop] = true;\n    }, this);\n    return this;\n};\n\n/**\n * Prepares the representation for JSON serialization.\n * @return {{}}\n */\nRepresentation.prototype.toJSON = function() {\n    // initialize the json entity\n    var payload = { _links: this._links };\n    var self = this;\n\n    // copy all target properties in the entity using JSON.stringify(). if the entity has a .toJSON() implementation,\n    // it will be called. properties on the ignore list will not be copied\n    var entity = this.entity;\n    JSON.stringify(entity, function (key, value) {\n        if (!key) {\n            return value;\n        }\n        if (!self._ignore[key]) {\n            payload[key] = value;\n        }\n    });\n\n    // merge in any extra properties\n    _.assign(payload, this._props);\n\n    const embeddedKeys = _.keys(this._embedded);\n    if (embeddedKeys.length > 0) {\n        payload._embedded = {};\n\n        const self = this;\n        embeddedKeys.forEach(function (embedKey) {\n            if (self._embedded[embedKey] instanceof Representation) {\n                payload._embedded[embedKey] = {};\n            } else if (self._embedded[embedKey] instanceof Array) {\n                payload._embedded[embedKey] = [];\n            }\n\n            JSON.stringify(self._embedded[embedKey], function (key, value) {\n                if (!key) {\n                    return value;\n                }\n\n                payload._embedded[embedKey][key] = value;\n            });\n        });\n    }\n\n    return payload;\n};\n\n/**\n * Creates a new link and adds it to the _links collection\n * @param rel\n * @param link\n * @return {{} || []} the new link\n */\nRepresentation.prototype.link = function(rel, link) {\n    var qname;\n    var originalRel = rel;\n    rel = this._halacious.rel(rel);\n    qname = rel.qname();\n\n    if (_.isArray(link)) {\n        var that = this;\n        this._links[qname] = [];\n        return link.map(function (l) {\n            return that.link(originalRel, l);\n        }, this);\n    }\n\n    // adds the namespace to the top level curie list\n    this.curie(rel.namespace);\n\n    link = this._halacious.link(link, this._links.self.href);\n    link.templated = templatedRE.test(link.href) ? true : undefined;\n    // e.g. 'mco:rel'\n    if (!this._links[qname]) {\n        this._links[qname] = link;\n    } else if (_.isArray(this._links[qname])) {\n        this._links[qname].push(link);\n    } else {\n        this._links[qname] = [this._links[qname], link];\n    }\n\n    return link;\n};\n\n/**\n * Resolves a relative path against the representation's self href\n * @param relativePath\n * @return {*}\n */\nRepresentation.prototype.resolve = function(relativePath) {\n    return new URI(relativePath).absoluteTo(this._links.self.href + '/').toString();\n};\n\n/**\n * Returns the path to a named route (specified by the plugins.hal.name configuration parameter), expanding any supplied\n * path parameters.\n * @param {String} routeName the route's name\n * @param {{}=} params for expanding templated urls\n * @return {*}\n */\nRepresentation.prototype.route = function(routeName, params) {\n    return this._halacious.route(routeName, params);\n};\n\n/**\n * Wraps an entity into a HAL representation and adds it to the _embedded collection\n * @param {String} rel the rel name\n * @param {String || {}} self an href or link object for the entity\n * @param {{} || []} entity an object to wrap\n * @return {entity || []}\n */\nRepresentation.prototype.embed = function(rel, self, entity) {\n    var qname;\n    var originalRel = rel;\n    rel = this._halacious.rel(rel);\n    qname = rel.qname();\n\n    this.curie(rel.namespace);\n\n    if (_.isArray(entity)){\n        var that = this;\n        this._embedded[qname] = [];\n        return entity.map(function (e) {\n            return that.embed(originalRel, self, e);\n        }, this);\n    }\n\n    self = this._halacious.link(self, this._links.self.href);\n\n    var embedded = this.factory.create(entity, self, this._root);\n\n    if (!this._embedded[qname]) {\n        this._embedded[qname] = embedded;\n    } else if (_.isArray(this._embedded[qname])) {\n        this._embedded[qname].push(embedded);\n    } else {\n        this._embedded[qname] = [this._embedded[qname], embedded];\n    }\n\n    return embedded;\n};\n\n/**\n * Convenience method for embedding an array of entities\n * @param rel\n * @param self\n * @param entities\n * @return {Representation}\n */\nRepresentation.prototype.embedCollection = function(rel, self, entities) {\n    entities = _.isArray(entities) ? entities : [ entities ];\n    entities.forEach(function (entity) {\n        this.embed(rel, hoek.clone(self), entity);\n    }, this);\n    return this;\n};\n\n/**\n * Responsible for creating all hal entities, top level or embedded, needed for a hapi request\n * @param halacious a reference to the plugin api\n * @param request a hapi request object\n * @constructor\n */\nfunction RepresentationFactory(halacious, request) {\n    this._halacious = halacious;\n    this._request = request;\n}\n\n/**\n * Creates a new hal representation out of a javascript object\n * @param {{}=} entity the entity to wrap with a representation. an empty object is created by default\n * @param {String || {}=} self the self href or link object. The request's path is used by default\n * @param {Representation} root a pointer to the top level representation for adding curied links\n * should be expanded into absolute urls\n * @return {Representation}\n */\nRepresentationFactory.prototype.create = function(entity, self, root) {\n    entity = entity || {};\n    self = self || this._request && this._request.path;\n    self = this._halacious.link(self);\n    return new Representation(this, self, entity, root);\n};\n\nmodule.exports.RepresentationFactory = RepresentationFactory;\n"}